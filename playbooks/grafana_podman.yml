- hosts: mon
  become: true
  vars:
    grafana_image: docker.io/grafana/grafana:11.1.0
    grafana_admin_password: admin
    grafana_dirs:
      - /etc/grafana/provisioning/datasources
      - /etc/grafana/provisioning/dashboards
      - /var/lib/grafana

  tasks:
    - name: Ensure provisioning & data dirs
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: "0755"
      loop: "{{ grafana_dirs }}"

    - name: Ensure Grafana data dir owned by container user (UID 472)
      ansible.builtin.file:
        path: /var/lib/grafana
        state: directory
        owner: 472
        group: 472
        mode: "0755"
        recurse: yes

    - name: (SELinux) relabel grafana data dir just in case
      ansible.builtin.command: restorecon -Rv /var/lib/grafana
      changed_when: false
      failed_when: false

    - name: Provision Prometheus datasource
      ansible.builtin.copy:
        dest: /etc/grafana/provisioning/datasources/prometheus.yml
        mode: "0644"
        content: |
          apiVersion: 1
          datasources:
            - name: Prometheus
              uid: PBFA97CFB590B2093
              type: prometheus
              access: proxy
              url: http://127.0.0.1:9090
              isDefault: true
              jsonData:
                timeInterval: 15s

    - name: Provision dashboards provider
      ansible.builtin.copy:
        dest: /etc/grafana/provisioning/dashboards/provider.yml
        mode: "0644"
        content: |
          apiVersion: 1
          providers:
            - name: 'default'
              orgId: 1
              type: file
              disableDeletion: false
              updateIntervalSeconds: 10
              allowUiUpdates: true
              options:
                path: /etc/grafana/provisioning/dashboards

    - name: Simple infra dashboard (stat + CPU)
      ansible.builtin.copy:
        dest: /etc/grafana/provisioning/dashboards/infra.json
        mode: "0644"
        content: |
          {
            "id": null,
            "uid": "infra-overview",
            "title": "Infra overview",
            "timezone": "browser",
            "schemaVersion": 39,
            "version": 1,
            "panels": [
              {
                "type": "stat",
                "title": "Up targets",
                "gridPos": {"h": 6, "w": 8, "x": 0, "y": 0},
                "datasource": {"type":"prometheus","uid":"PBFA97CFB590B2093"},
                "targets": [{"expr":"sum(up)"}]
              },
              {
                "type": "timeseries",
                "title": "CPU usage %",
                "gridPos": {"h": 10, "w": 24, "x": 0, "y": 6},
                "datasource": {"type":"prometheus","uid":"PBFA97CFB590B2093"},
                "targets": [
                  {"expr":"100 - (avg by (instance) (irate(node_cpu_seconds_total{mode=\"idle\"}[5m])) * 100)"}
                ]
              }
            ]
          }

    - name: Systemd unit - Grafana (Podman)
      ansible.builtin.copy:
        dest: /etc/systemd/system/grafana.service
        mode: "0644"
        content: |
          [Unit]
          Description=Grafana (Podman)
          After=network-online.target
          Wants=network-online.target

          [Service]
          Restart=always
          ExecStartPre=/usr/bin/podman rm -f grafana
          ExecStart=/usr/bin/podman run --rm --name grafana --net=host \
            -v /etc/grafana/provisioning:/etc/grafana/provisioning:Z \
            -v /var/lib/grafana:/var/lib/grafana:Z \
            -e GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD} \
            -e GF_USERS_ALLOW_SIGN_UP=false \
            -e GF_SERVER_DOMAIN=192.168.100.5 \
            -e GF_SERVER_ROOT_URL=http://192.168.100.5:3000/ \
            -e GF_SERVER_SERVE_FROM_SUB_PATH=false \
            {{ grafana_image }}
          Environment=GRAFANA_ADMIN_PASSWORD={{ grafana_admin_password }}
          ExecStop=/usr/bin/podman stop grafana

          [Install]
          WantedBy=multi-user.target

    - name: Reload systemd
      ansible.builtin.systemd:
        daemon_reload: yes

    - name: Enable and start Grafana
      ansible.builtin.systemd:
        name: grafana
        state: restarted
        enabled: yes

    - name: Open Grafana port (permanent)
      ansible.builtin.command: firewall-cmd --add-port=3000/tcp --permanent
      register: fw1
      changed_when: "'added' in fw1.stdout or 'success' in fw1.stdout"
      failed_when: false

    - name: Reload firewalld (if changed)
      ansible.builtin.command: firewall-cmd --reload
      when: fw1 is changed
      failed_when: false
